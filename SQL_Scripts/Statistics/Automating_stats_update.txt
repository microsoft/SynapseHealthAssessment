How to automate Update Statsitics Operation?
Here are the scripts that can be used to create a list of tables that need update statsitics and to build the command for update stats.

//Option 1//

A table can be created and commands can be instered manually for the tables that needs to be updated regulary, for example where updates are higher and tables are accessed very frequently.
CREATE TABLE [Maint].[List_Of_Tables_For_Stats_Update] (
[ID] [bigint] NULL,
[Name] [varchar](1000) NULL, [Command] [varchar](4000) NULL
)
WITH (
DISTRIBUTION = ROUND_ROBIN, CLUSTERED COLUMNSTORE INDEX
)
CREATE TABLE [Maint].[Errorlog_stats] (
[ExecutionDate] [datetime] NULL, [StoredProcedureName] [nvarchar](200) NULL, [ErrorNumber] [nvarchar](200) NULL, [ErrorSeverity] [nvarchar](200) NULL, [ErrorState] [nvarchar](200) NULL, [ErrorMessage] [nvarchar](4000) NULL
)
WITH (
DISTRIBUTION = ROUND_ROBIN, CLUSTERED COLUMNSTORE INDEX
)

Here is the procedure that can be used to create a list of tables and the commands for update stats.
CREATE PROC [Maint].[usp_update_Stats_for_defined_tables] AS begin
DECLARE @total_tables INT = (SELECT COUNT(*) FROM automation.list_of_Tables_for_stats_update), @i INT = 1 WHILE @i <= @total_tables
BEGIN
DECLARE @sql_code NVARCHAR(4000) = (SELECT command FROM automation.list_of_Tables_for_stats_update WHERE id = @i); begin try
EXEC sp_executesql @sql_code; end try
begin catch
insert into [Maint].[Errorlog_stats] SELECT
getdate()
,ERROR_PROCEDURE() AS ErrorProcedure
,ERROR_NUMBER() AS ErrorNumber
,ERROR_SEVERITY() AS ErrorSeverity
,ERROR_STATE() AS ErrorState
,ERROR_MESSAGE() AS ErrorMessage; end catch
SET @i +=1; END
end GO
 
//Option 2//

The other options is to target specific or top objects where there is a guge difference in the Actual Rows vs Rows calculated from the statistics.

CREATE TABLE [Maint].[update_stats_command] (
[table_schema] [varchar](100) NULL, [table_name] [varchar](100) NULL, [stats_row_count] [bigint] NULL, [actual_row_count] [bigint] NULL, [row_count_difference] [bigint] NULL, [percent_deviation_from_actual] [bigint] NULL, [command] [varchar](500) NULL,
[id] [int] IDENTITY(1,1) NOT NULL,
[update_status] [int] NULL, [update_date] [datetime] NULL
)
WITH (
DISTRIBUTION = ROUND_ROBIN, CLUSTERED COLUMNSTORE INDEX
)



// The below procedure will create a list of tables where stats needs to be updated; and the selected objects and their details will be inserted into a Table //

SET ANSI_NULLS ON GO
SET QUOTED_IDENTIFIER ON GO
CREATE PROC [Maint].[update_stats_command_creation] AS begin
BEGIN TRY
TRUNCATE TABLE [Maint].[update_stats_command]; INSERT INTO [Maint].[update_stats_command]
(table_schema, table_name, stats_row_count, actual_row_count, row_count_difference, percent_deviation_from_actual, command) select top 150
actualRowCounts.[schema], object_name(objIdsWithStats.[object_id]) as [Oname], statsRowCounts.stats_row_count, actualRowCounts.actual_row_count, row_count_difference = CASE
WHEN actualRowCounts.actual_row_count >= statsRowCounts.stats_row_count THEN actualRowCounts.actual_row_count - statsRowCounts.stats_row_count
ELSE statsRowCounts.stats_row_count - actualRowCounts.actual_row_count END,
percent_deviation_from_actual = CASE
WHEN actualRowCounts.actual_row_count = 0 THEN statsRowCounts.stats_row_count WHEN statsRowCounts.stats_row_count = 0 THEN actualRowCounts.actual_row_count
WHEN actualRowCounts.actual_row_count >= statsRowCounts.stats_row_count THEN CONVERT(NUMERIC(18, 0), CONVERT(NUMERIC(18, 2), (actualRowCounts.actual_row_count - statsRowCounts.stats_row_count)) / CONVERT(NUMERIC(18, 2), actualRowCounts.actual_row_count) * 100)
ELSE CONVERT(NUMERIC(18, 0), CONVERT(NUMERIC(18, 2), (statsRowCounts.stats_row_count - actualRowCounts.actual_row_count))
/ CONVERT(NUMERIC(18, 2), actualRowCounts.actual_row_count) * 100) END,
'UPDATE STATISTICS ['+actualRowCounts.[schema]+'].['+object_name(objIdsWithStats.[object_id])+'] WITH SAMPLE 1 PERCENT;'
--\\Adjust Sample Percent accordingly\\ from
 
(
select distinct object_id from sys.stats where stats_id > 1 and object_name([object_id]) NOT LIKE '%snapshot%' AND object_name([object_id]) NOT LIKE '%bak%'
AND object_name([object_id]) NOT LIKE '%temp%' AND object_name([object_id]) NOT LIKE '%tmp%'
) objIdsWithStats left join
(
select object_id, sum(rows) as stats_row_count from sys.partitions group by object_id
) statsRowCounts
on objIdsWithStats.object_id = statsRowCounts.object_id left join
(
SELECT sm.name [schema] , tb.name logical_table_name , tb.object_id object_id ,
SUM(rg.row_count) actual_row_count FROM sys.schemas sm
INNER JOIN sys.tables tb ON sm.schema_id = tb.schema_id
INNER JOIN sys.pdw_table_mappings mp ON tb.object_id = mp.object_id INNER JOIN sys.pdw_nodes_tables nt ON nt.name = mp.physical_name INNER JOIN sys.dm_pdw_nodes_db_partition_stats rg
ON rg.object_id = nt.object_id
AND rg.pdw_node_id = nt.pdw_node_id AND rg.distribution_id = nt.distribution_id WHERE 1 = 1
GROUP BY sm.name, tb.name, tb.object_id
) actualRowCounts
on objIdsWithStats.object_id = actualRowCounts.object_id
where actualRowCounts.actual_row_count > statsRowCounts.stats_row_count and actualRowCounts.[schema] not in ('STG','TEMP', 'TEST')
order by percent_deviation_from_actual desc,row_count_difference desc END TRY
BEGIN CATCH
DECLARE @ErrMessage NVARCHAR(4000) = ERROR_MESSAGE(), @ErrState TINYINT = ISNULL(ERROR_STATE(),1), @ErrSeverity TINYINT = ISNULL(ERROR_SEVERITY(),18);
RAISERROR(@ErrMessage, @ErrSeverity, @ErrState); END CATCH

end GO

Executing a procedre to create a list of objects that needs statistics update

EXEC [Maint].[update_stats_command_creation] SELECT * FROM [Maint].[update_stats_command]


// How to run updates stats against the tables identified//

CREATE PROC [Maint].[update_stats_run] AS begin
DECLARE @total INT = 150, @i INT = 1
WHILE @i <= @total BEGIN
DECLARE @min_id int = (SELECT min(id) FROM Maint.[update_stats_command] WHERE update_status is null) DECLARE @sql_code NVARCHAR(4000) = (select command from Maint.[update_stats_command]
where id = @min_id ); Begin Try
EXEC sp_executesql @sql_code;
update [Maint].[update_stats_command] set update_status=1,update_date=getdate() where id=@min_id End Try
Begin Catch
insert into [Maint].[Errorlog_update_stats] SELECT
 








END
end

