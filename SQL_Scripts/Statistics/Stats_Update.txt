-- create table to store the tsql UPDATE STATISTICS commands
create table #tmpCmds
with (distribution = round_robin)
as
select row_number() over(order by (select null)) as sequence, N'update statistics ['+[schema]+'].['+logical_table_name+']' as update_stats_on_table_tsql
from
(
select 
objIdsWithStats.[object_id], 
actualRowCounts.[schema], 
actualRowCounts.logical_table_name, 
statsRowCounts.stats_row_count, 
actualRowCounts.actual_row_count,
row_count_difference = CASE
WHEN actualRowCounts.actual_row_count >= statsRowCounts.stats_row_count THEN actualRowCounts.actual_row_count - statsRowCounts.stats_row_count
ELSE statsRowCounts.stats_row_count - actualRowCounts.actual_row_count
END,
percent_deviation_from_actual = CASE
WHEN actualRowCounts.actual_row_count = 0 THEN statsRowCounts.stats_row_count
WHEN statsRowCounts.stats_row_count = 0 THEN actualRowCounts.actual_row_count
WHEN actualRowCounts.actual_row_count >= statsRowCounts.stats_row_count THEN CONVERT(NUMERIC(18, 0), CONVERT(NUMERIC(18, 2), (actualRowCounts.actual_row_count - statsRowCounts.stats_row_count)) / CONVERT(NUMERIC(18, 2), actualRowCounts.actual_row_count) * 100)
ELSE CONVERT(NUMERIC(18, 0), CONVERT(NUMERIC(18, 2), (statsRowCounts.stats_row_count - actualRowCounts.actual_row_count)) / CONVERT(NUMERIC(18, 2), actualRowCounts.actual_row_count) * 100)
END
from
(
select distinct object_id from sys.stats where stats_id > 1
) objIdsWithStats
left join
(
select object_id, sum(rows) as stats_row_count from sys.partitions group by object_id
) statsRowCounts
on objIdsWithStats.object_id = statsRowCounts.object_id 
left join
(
SELECT sm.name [schema] ,
tb.name logical_table_name ,
tb.object_id object_id ,
SUM(rg.row_count) actual_row_count
FROM sys.schemas sm
INNER JOIN sys.tables tb ON sm.schema_id = tb.schema_id
INNER JOIN sys.pdw_table_mappings mp ON tb.object_id = mp.object_id
INNER JOIN sys.pdw_nodes_tables nt ON nt.name = mp.physical_name
INNER JOIN sys.dm_pdw_nodes_db_partition_stats rg
ON rg.object_id = nt.object_id
AND rg.pdw_node_id = nt.pdw_node_id
AND rg.distribution_id = nt.distribution_id
WHERE 1 = 1
GROUP BY sm.name, tb.name, tb.object_id
) actualRowCounts
on objIdsWithStats.object_id = actualRowCounts.object_id 
) allTables
where percent_deviation_from_actual > 20        -- CUSTOMER SHOULD MODIFY AS NEEDED
and actual_row_count > 10000                        -- CUSTOMER SHOULD MODIFY AS NEEDED
and row_count_difference > 10000                -- CUSTOMER SHOULD MODIFY AS NEEDED
 
-- execute the actual update statistics command
declare @numCmds int = (select count(*) from #tmpCmds), @i int = 1  
while @i <= @numCmds
begin
declare @sql_code nvarchar(4000) = (select update_stats_on_table_tsql from #tmpCmds where sequence = @i)
exec sp_executesql @sql_code 
set @i += 1;
end
 
drop table #tmpCmds 
 

Notes:
•	This query builds on top of the query from #4. 
•	The customer should modify the where clause to determine which tables they want to update statistics on. 
•	This will actually run the update statistics commands.
•	If customer doesn't want to actually execute the command, they can remove or comment out the WHILE loop and just look at <SELECT * FROM #tmpCmds> to view which tables would get their statistics updated.

 
